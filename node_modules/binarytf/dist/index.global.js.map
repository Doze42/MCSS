{"version":3,"sources":["../src/index.ts","../src/lib/errors/DeserializerError.ts","../src/lib/util/constants.ts","../src/lib/util/util.ts","../src/lib/Deserializer.ts","../src/lib/errors/SerializerError.ts","../src/lib/Serializer.ts"],"sourcesContent":["import { Deserializer } from './lib/Deserializer';\nimport { OnUnsupported, Serializer } from './lib/Serializer';\nexport * from './lib/Deserializer';\nexport * from './lib/errors/DeserializerError';\nexport * from './lib/errors/SerializerError';\nexport * from './lib/Serializer';\nexport * from './lib/util/constants';\nexport * from './lib/util/util';\n\nexport function serialize<T = unknown>(data: T, onUnsupported?: OnUnsupported) {\n\treturn new Serializer(data, onUnsupported).process();\n}\n\nexport function deserialize<T = unknown>(buffer: Uint8Array, offset = -1) {\n\tconst deserializer = new Deserializer(buffer);\n\tif (offset !== -1) deserializer.offset = offset;\n\tconst value = deserializer.read() as T;\n\tdeserializer.clean();\n\treturn value;\n}\n\nexport function deserializeWithMetadata<T = unknown>(buffer: Uint8Array, offset = -1) {\n\tconst deserializer = new Deserializer(buffer);\n\tif (offset !== -1) deserializer.offset = offset;\n\tconst value = deserializer.read() as T;\n\tconst bufferOffset = deserializer.offset;\n\tdeserializer.clean();\n\n\treturn {\n\t\tvalue,\n\t\toffset: bufferOffset === buffer.byteLength ? -1 : bufferOffset\n\t};\n}\n","export class DeserializerError extends Error {\n\tpublic kind: DeserializerReason;\n\n\tpublic constructor(message: string, kind: DeserializerReason) {\n\t\tsuper(message);\n\t\tthis.kind = kind;\n\t}\n}\n\nexport enum DeserializerReason {\n\tUnknownType = 'UnknownType',\n\tUnexpectedEndOfBuffer = 'UnexpectedEndOfBuffer'\n}\n","export enum BinaryTokens {\n\tNullPointer,\n\tHole,\n\tNull,\n\tPBigInt,\n\tNBigInt,\n\tBoolean,\n\tString,\n\tUndefined,\n\tUnsignedByte,\n\tSignedByte,\n\tUnsignedInt32,\n\tSignedInt32,\n\tUnsignedFloat64,\n\tSignedFloat64,\n\tArray,\n\tEmptyArray,\n\tObjectReference,\n\tDate,\n\tBooleanObject,\n\tNumberObject,\n\tStringObject,\n\tEmptyObject,\n\tObject,\n\tRegExp,\n\tMap,\n\tEmptyMap,\n\tWeakMap,\n\tSet,\n\tEmptySet,\n\tWeakSet,\n\tArrayBuffer,\n\tInt8Array,\n\tUint8Array,\n\tUint8ClampedArray,\n\tInt16Array,\n\tUint16Array,\n\tInt32Array,\n\tUint32Array,\n\tFloat32Array,\n\tFloat64Array,\n\tDataView\n}\n\nexport enum BinaryPrimitives {\n\tBigInt = 'bigint',\n\tBoolean = 'boolean',\n\tNumber = 'number',\n\tObject = 'object',\n\tString = 'string',\n\tUndefined = 'undefined'\n}\n\nexport type TypedArray = Uint8Array | Float32Array | Int32Array;\nexport const TypedArray = Object.getPrototypeOf(Int8Array) as TypedArray;\n","import { BinaryTokens, TypedArray } from './constants';\n\nexport namespace RegExps {\n\tconst g = 1 << 0;\n\tconst i = 1 << 1;\n\tconst m = 1 << 2;\n\tconst y = 1 << 3;\n\tconst u = 1 << 4;\n\tconst s = 1 << 5;\n\n\texport function flagsAsInteger(regExp: RegExp) {\n\t\treturn (\n\t\t\t(regExp.global ? g : 0) |\n\t\t\t(regExp.ignoreCase ? i : 0) |\n\t\t\t(regExp.multiline ? m : 0) |\n\t\t\t(regExp.sticky ? y : 0) |\n\t\t\t(regExp.unicode ? u : 0) |\n\t\t\t(regExp.dotAll ? s : 0)\n\t\t);\n\t}\n\n\texport function flagsFromInteger(integer: number) {\n\t\tlet ret = '';\n\t\tif (integer & g) ret += 'g';\n\t\tif (integer & i) ret += 'i';\n\t\tif (integer & m) ret += 'm';\n\t\tif (integer & y) ret += 'y';\n\t\tif (integer & u) ret += 'u';\n\t\tif (integer & s) ret += 's';\n\t\treturn ret;\n\t}\n}\n\nexport namespace BigIntegers {\n\texport const SUPPORTED = typeof BigInt === 'function';\n\texport const ZERO = SUPPORTED ? BigInt(0) : null;\n\texport const ONE = SUPPORTED ? BigInt(1) : null;\n\texport const EIGHT = SUPPORTED ? BigInt(8) : null;\n\texport const BYTE = SUPPORTED ? BigInt(0xff) : null;\n}\n\nexport namespace Numbers {\n\texport function nextPowerOfTwo(n: number) {\n\t\treturn Math.pow(2, Math.ceil(Math.log2(n)));\n\t}\n}\n\nexport namespace TypedArrays {\n\texport const constructors = [\n\t\tInt8Array,\n\t\tUint8Array,\n\t\tUint8ClampedArray,\n\t\tInt16Array,\n\t\tUint16Array,\n\t\tInt32Array,\n\t\tUint32Array,\n\t\tFloat32Array,\n\t\tFloat64Array,\n\t\tDataView\n\t] as { new <T extends TypedArray>(...args: any): T }[];\n\n\tif (typeof BigInt64Array === 'function') constructors.push(BigInt64Array);\n\tif (typeof BigUint64Array === 'function') constructors.push(BigUint64Array);\n\n\texport const typedArrayTags = new Map(\n\t\tconstructors.map(\n\t\t\t(typedArray) =>\n\t\t\t\t// @ts-ignore 7015\n\t\t\t\t[Object.prototype.toString.call(new typedArray(new ArrayBuffer(0))), BinaryTokens[typedArray.name]] as [string, BinaryTokens]\n\t\t)\n\t);\n\n\texport const typedArrayTagToConstructor = new Map(\n\t\tconstructors.map(\n\t\t\t(typedArray) =>\n\t\t\t\t// @ts-ignore 7015\n\t\t\t\t[BinaryTokens[typedArray.name], typedArray] as unknown as [BinaryTokens, { new <T extends TypedArray>(...args: any): T }]\n\t\t)\n\t);\n}\n","// eslint-disable-next-line spaced-comment\n/// <reference lib=\"dom\" />\n\nimport { DeserializerError, DeserializerReason } from './errors/DeserializerError';\nimport { BinaryTokens, TypedArray } from './util/constants';\nimport { BigIntegers, RegExps, TypedArrays } from './util/util';\n\nconst float64Array = new Float64Array(1);\nconst uInt8Float64Array = new Uint8Array(float64Array.buffer);\n\nexport class Deserializer {\n\tpublic offset = 0;\n\tprivate _buffer: Uint8Array | null;\n\tprivate _objectIDs = new Map() as Map<number, Record<any, any>>;\n\n\tpublic constructor(buffer: Uint8Array) {\n\t\tthis._buffer = buffer;\n\t}\n\n\tprivate get finished() {\n\t\treturn this.offset === this._buffer!.length;\n\t}\n\n\tpublic clean() {\n\t\tthis._buffer = null;\n\t\tthis.offset = 0;\n\t\tthis._objectIDs.clear();\n\t}\n\n\tpublic read() {\n\t\tconst type = this.read8();\n\t\tswitch (type) {\n\t\t\tcase BinaryTokens.Null:\n\t\t\t\treturn null;\n\t\t\tcase BinaryTokens.PBigInt:\n\t\t\t\treturn this.readValueBigInt(false);\n\t\t\tcase BinaryTokens.NBigInt:\n\t\t\t\treturn this.readValueBigInt(true);\n\t\t\tcase BinaryTokens.Boolean:\n\t\t\t\treturn Boolean(this.read8());\n\t\t\tcase BinaryTokens.String:\n\t\t\t\treturn this.readString();\n\t\t\tcase BinaryTokens.Undefined:\n\t\t\t\treturn undefined;\n\t\t\tcase BinaryTokens.UnsignedByte:\n\t\t\t\treturn this.read8();\n\t\t\tcase BinaryTokens.SignedByte:\n\t\t\t\treturn -this.read8();\n\t\t\tcase BinaryTokens.UnsignedInt32:\n\t\t\t\treturn this.read32();\n\t\t\tcase BinaryTokens.SignedInt32:\n\t\t\t\treturn -this.read32();\n\t\t\tcase BinaryTokens.UnsignedFloat64:\n\t\t\t\treturn this.readF64();\n\t\t\tcase BinaryTokens.SignedFloat64:\n\t\t\t\treturn -this.readF64();\n\t\t\tcase BinaryTokens.Array:\n\t\t\t\treturn this.readValueArray();\n\t\t\tcase BinaryTokens.EmptyArray:\n\t\t\t\treturn this.createObjectID([]);\n\t\t\tcase BinaryTokens.ObjectReference:\n\t\t\t\treturn this._objectIDs.get(this.read32());\n\t\t\tcase BinaryTokens.Date:\n\t\t\t\treturn this.createObjectID(new Date(this.readF64()));\n\t\t\tcase BinaryTokens.BooleanObject:\n\t\t\t\t// eslint-disable-next-line no-new-wrappers\n\t\t\t\treturn this.createObjectID(new Boolean(this.read8()));\n\t\t\tcase BinaryTokens.NumberObject:\n\t\t\t\t// eslint-disable-next-line no-new-wrappers\n\t\t\t\treturn this.createObjectID(new Number(this.readF64()));\n\t\t\tcase BinaryTokens.StringObject:\n\t\t\t\t// eslint-disable-next-line no-new-wrappers\n\t\t\t\treturn this.createObjectID(new String(this.readString()));\n\t\t\tcase BinaryTokens.EmptyObject:\n\t\t\t\treturn this.createObjectID({});\n\t\t\tcase BinaryTokens.Object:\n\t\t\t\treturn this.readValueObject();\n\t\t\tcase BinaryTokens.RegExp:\n\t\t\t\treturn this.createObjectID(new RegExp(this.readString(), RegExps.flagsFromInteger(this.read8())));\n\t\t\tcase BinaryTokens.Map:\n\t\t\t\treturn this.readValueMap();\n\t\t\tcase BinaryTokens.EmptyMap:\n\t\t\t\treturn this.createObjectID(new Map());\n\t\t\tcase BinaryTokens.Set:\n\t\t\t\treturn this.readValueSet();\n\t\t\tcase BinaryTokens.EmptySet:\n\t\t\t\treturn this.createObjectID(new Set());\n\t\t\tcase BinaryTokens.ArrayBuffer:\n\t\t\t\treturn this.readValueArrayBuffer();\n\t\t\tcase BinaryTokens.WeakMap:\n\t\t\t\treturn this.createObjectID(new WeakMap());\n\t\t\tcase BinaryTokens.WeakSet:\n\t\t\t\treturn this.createObjectID(new WeakSet());\n\t\t\tcase BinaryTokens.Int8Array:\n\t\t\tcase BinaryTokens.Uint8Array:\n\t\t\tcase BinaryTokens.Uint8ClampedArray:\n\t\t\tcase BinaryTokens.Int16Array:\n\t\t\tcase BinaryTokens.Uint16Array:\n\t\t\tcase BinaryTokens.Int32Array:\n\t\t\tcase BinaryTokens.Uint32Array:\n\t\t\tcase BinaryTokens.Float32Array:\n\t\t\tcase BinaryTokens.Float64Array:\n\t\t\tcase BinaryTokens.DataView:\n\t\t\t\treturn this.readValueTypedArray(type);\n\t\t\tdefault:\n\t\t\t\tthrow new DeserializerError(`Unknown type received: ${type}`, DeserializerReason.UnknownType);\n\t\t}\n\t}\n\n\tprivate readValueTypedArray(token: BinaryTokens) {\n\t\t// Read the byte length, then create a shared ArrayBuffer for the desired\n\t\t// typedArray and an Uint8Array which we write to.\n\t\tconst byteLength = this.read32();\n\t\tthis.ensureBytes(byteLength);\n\n\t\t// eslint-disable-next-line @typescript-eslint/init-declarations\n\t\tlet value: TypedArray;\n\t\t// Fast-path if we are deserializing an Uint8Array\n\t\tif (token === BinaryTokens.Uint8Array) {\n\t\t\tvalue = this._buffer!.subarray(this.offset, this.offset + byteLength);\n\t\t} else {\n\t\t\tconst buffer = new ArrayBuffer(byteLength);\n\t\t\tconst ctor = TypedArrays.typedArrayTagToConstructor.get(token)!;\n\t\t\tvalue = new ctor(buffer);\n\t\t\tnew Uint8Array(buffer).set(this._buffer!.subarray(this.offset, this.offset + byteLength));\n\t\t}\n\t\tthis.offset += byteLength;\n\t\treturn this.createObjectID(value);\n\t}\n\n\tprivate readValueArrayBuffer() {\n\t\tconst value = this.createObjectID(new ArrayBuffer(this.read32()));\n\n\t\tconst uint8Array = new Uint8Array(value);\n\t\tfor (let i = 0, max = uint8Array.length; i < max; i++) {\n\t\t\tuint8Array[i] = this.read8();\n\t\t}\n\t\treturn value;\n\t}\n\n\tprivate readValueSet() {\n\t\tconst value = this.createObjectID(new Set());\n\t\twhile (!this.readNullTerminator()) {\n\t\t\tvalue.add(this.read());\n\t\t}\n\n\t\treturn value;\n\t}\n\n\tprivate readValueMap() {\n\t\tconst value = this.createObjectID(new Map());\n\t\twhile (!this.readNullTerminator()) {\n\t\t\tvalue.set(this.read(), this.read());\n\t\t}\n\n\t\treturn value;\n\t}\n\n\tprivate readValueObject() {\n\t\tconst value = this.createObjectID({}) as Record<string | number, unknown>;\n\t\twhile (!this.readNullTerminator()) {\n\t\t\tconst entryKey = this.read() as string | number;\n\t\t\tconst entryValue = this.read();\n\t\t\tvalue[entryKey] = entryValue;\n\t\t}\n\n\t\treturn value;\n\t}\n\n\tprivate readValueArray() {\n\t\tconst value = this.createObjectID([] as unknown[]);\n\t\tlet i = 0;\n\t\twhile (!this.readNullTerminator()) {\n\t\t\tif (this.read8() !== BinaryTokens.Hole) {\n\t\t\t\tthis.offsetBack();\n\t\t\t\tvalue[i] = this.read();\n\t\t\t}\n\t\t\t++i;\n\t\t}\n\n\t\t// This is required for holey arrays\n\t\tvalue.length = i;\n\n\t\treturn value;\n\t}\n\n\tprivate readString() {\n\t\tconst end = this._buffer!.indexOf(BinaryTokens.NullPointer, this.offset);\n\t\tif (end === -1) {\n\t\t\tthrow new DeserializerError('Found End-Of-Buffer, expecting a `NullTerminator` before.', DeserializerReason.UnexpectedEndOfBuffer);\n\t\t}\n\t\tconst sub = this._buffer!.subarray(this.offset, end);\n\t\tconst str = Deserializer._textDecoder.decode(sub);\n\t\tthis.offset = end + 1;\n\t\treturn str;\n\t}\n\n\tprivate readValueBigInt(sign: boolean) {\n\t\tconst byteLength = this.read32();\n\n\t\tlet value = BigIntegers.ZERO!;\n\t\tlet b = BigIntegers.ONE!;\n\n\t\tfor (let i = 0; i < byteLength; i++) {\n\t\t\tconst digit = this.read8();\n\t\t\tvalue += BigInt(digit) * b;\n\t\t\tb <<= BigIntegers.EIGHT!;\n\t\t}\n\n\t\treturn sign ? -value : value;\n\t}\n\n\tprivate readNullTerminator() {\n\t\tif (this.watch8() === BinaryTokens.NullPointer) {\n\t\t\t++this.offset;\n\t\t\treturn true;\n\t\t} else if (this.finished) {\n\t\t\tthrow new DeserializerError('Found End-Of-Buffer, expecting a `NullTerminator` before.', DeserializerReason.UnexpectedEndOfBuffer);\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate createObjectID<T extends {} | object>(value: T) {\n\t\tthis._objectIDs.set(this._objectIDs.size, value);\n\t\treturn value;\n\t}\n\n\tprivate offsetBack() {\n\t\t--this.offset;\n\t}\n\n\tprivate watch8() {\n\t\treturn this._buffer![this.offset];\n\t}\n\n\tprivate read8() {\n\t\tthis.ensureBytes(1);\n\t\treturn this._buffer![this.offset++];\n\t}\n\n\tprivate read32() {\n\t\tthis.ensureBytes(4);\n\t\treturn (\n\t\t\tthis._buffer![this.offset++] * 2 ** 24 +\n\t\t\tthis._buffer![this.offset++] * 2 ** 16 +\n\t\t\tthis._buffer![this.offset++] * 2 ** 8 +\n\t\t\tthis._buffer![this.offset++]\n\t\t);\n\t}\n\n\tprivate readF64() {\n\t\tthis.ensureBytes(8);\n\t\tuInt8Float64Array[0] = this._buffer![this.offset++];\n\t\tuInt8Float64Array[1] = this._buffer![this.offset++];\n\t\tuInt8Float64Array[2] = this._buffer![this.offset++];\n\t\tuInt8Float64Array[3] = this._buffer![this.offset++];\n\t\tuInt8Float64Array[4] = this._buffer![this.offset++];\n\t\tuInt8Float64Array[5] = this._buffer![this.offset++];\n\t\tuInt8Float64Array[6] = this._buffer![this.offset++];\n\t\tuInt8Float64Array[7] = this._buffer![this.offset++];\n\t\treturn float64Array[0];\n\t}\n\n\tprivate ensureBytes(amount: number) {\n\t\tif (this.offset + amount > this._buffer!.length) {\n\t\t\tthrow new DeserializerError(`Found End-Of-Buffer, expecting ${amount} byte(s).`, DeserializerReason.UnexpectedEndOfBuffer);\n\t\t}\n\t}\n\n\tprivate static _textDecoder = new TextDecoder();\n}\n","export class SerializerError extends Error {\n\tpublic kind: SerializerReason;\n\n\tpublic constructor(message: string, kind: SerializerReason) {\n\t\tsuper(message);\n\t\tthis.kind = kind;\n\t}\n}\n\nexport enum SerializerReason {\n\tUnsupportedType = 'UnsupportedType',\n\tUnsupportedSerializedType = 'UnsupportedSerializedType',\n\tUnexpectedNullValue = 'UnexpectedNullValue'\n}\n","// eslint-disable-next-line spaced-comment\n/// <reference lib=\"dom\" />\n\nimport { SerializerError, SerializerReason } from './errors/SerializerError';\nimport { BinaryPrimitives, BinaryTokens, TypedArray } from './util/constants';\nimport { BigIntegers, Numbers, RegExps, TypedArrays } from './util/util';\n\n// Immutable\nconst MIN_INT8 = -0b0111_1111;\nconst MAX_INT8 = 0b1111_1111;\nconst MIN_INT32 = -0b0111_1111_1111_1111_1111_1111_1111_1111;\nconst MAX_INT32 = 0b1111_1111_1111_1111_1111_1111_1111_1111;\n\n// Mutable\nconst float64Array = new Float64Array(1);\nconst uInt8Float64Array = new Uint8Array(float64Array.buffer);\n\nexport interface OnUnsupported {\n\t(value: unknown): unknown;\n}\n\nexport class Serializer {\n\tpublic onUnsupported: OnUnsupported | null;\n\tprivate _buffer: Uint8Array | null = new Uint8Array(16);\n\tprivate _offset = 0;\n\tprivate _objectIDs = new Map() as Map<Record<any, any>, number>;\n\tprivate _data: any;\n\tprivate _handlingUnsupported = false;\n\n\tpublic constructor(data: any, onUnsupported: OnUnsupported | null = null) {\n\t\tthis._data = data;\n\t\tthis.onUnsupported = onUnsupported;\n\t}\n\n\tpublic process() {\n\t\tthis.parse(this._data);\n\t\tconst temp = this._buffer!.subarray(0, this._offset);\n\n\t\tthis._data = null;\n\t\tthis._offset = 0;\n\t\tthis._objectIDs.clear();\n\t\tthis._buffer = null;\n\t\treturn temp;\n\t}\n\n\tpublic parse(value: any, hint = typeof value) {\n\t\tswitch (hint) {\n\t\t\tcase BinaryPrimitives.BigInt:\n\t\t\t\treturn this.parseBigInt(value);\n\t\t\tcase BinaryPrimitives.Boolean:\n\t\t\t\treturn this.parseBoolean(value);\n\t\t\tcase BinaryPrimitives.Number:\n\t\t\t\treturn this.parseNumber(value);\n\t\t\tcase BinaryPrimitives.Object:\n\t\t\t\treturn this.parseObject(value);\n\t\t\tcase BinaryPrimitives.String:\n\t\t\t\treturn this.parseString(value);\n\t\t\tcase BinaryPrimitives.Undefined:\n\t\t\t\treturn this.parseUndefined();\n\t\t\tdefault:\n\t\t\t\treturn this.handleUnsupported(value, hint);\n\t\t}\n\t}\n\n\tprotected handleUnsupported(value: unknown, hint: string) {\n\t\t// If there's an onUnsupported handler, try to call it\n\t\tif (this.onUnsupported) {\n\t\t\t// If the serializer was handling an unsupported type, abort the serialization\n\t\t\t// as it's most likely an error in the return type of the handler.\n\t\t\tif (this._handlingUnsupported) {\n\t\t\t\tthrow new SerializerError('The modified value was not serializable.', SerializerReason.UnsupportedSerializedType);\n\t\t\t}\n\n\t\t\t// Set the serializer to handling unsupported, parse, and once it's done\n\t\t\t// serializing the output of unSupported, set it back to false.\n\t\t\tthis._handlingUnsupported = true;\n\t\t\tthis.parse(this.onUnsupported(value));\n\t\t\tthis._handlingUnsupported = false;\n\t\t\treturn;\n\t\t}\n\n\t\t// If no handler is available, throw TypeError\n\t\tthrow new SerializerError(`Unsupported type '${hint}'.`, SerializerReason.UnsupportedType);\n\t}\n\n\tprivate parseBigInt(value: bigint) {\n\t\tconst sign = value >= BigIntegers.ZERO! ? 0 : 1;\n\t\tthis.ensureAlloc(5);\n\t\tthis.write8(sign ? BinaryTokens.NBigInt : BinaryTokens.PBigInt);\n\n\t\tconst headerOffset = this._offset;\n\t\tthis._offset += 4;\n\n\t\tlet unsignedBigInt = sign === 1 ? -value : value;\n\t\tlet byteCount = 0;\n\t\twhile (unsignedBigInt > 0) {\n\t\t\t++byteCount;\n\t\t\tthis.write8(Number(unsignedBigInt & BigIntegers.BYTE!));\n\t\t\tunsignedBigInt >>= BigIntegers.EIGHT!;\n\t\t}\n\n\t\tthis.write32At(byteCount, headerOffset);\n\t}\n\n\tprivate parseBoolean(value: boolean) {\n\t\tthis.write8(BinaryTokens.Boolean);\n\t\tthis.write8(value ? 1 : 0);\n\t}\n\n\tprivate parseNumber(value: number) {\n\t\tconst type = this.getNumberType(value);\n\t\tthis.write8(type);\n\t\tswitch (type) {\n\t\t\tcase BinaryTokens.SignedByte:\n\t\t\t\tthis.write8(-value);\n\t\t\t\tbreak;\n\t\t\tcase BinaryTokens.UnsignedByte:\n\t\t\t\tthis.write8(value);\n\t\t\t\tbreak;\n\t\t\tcase BinaryTokens.SignedInt32:\n\t\t\t\tthis.write32(-value);\n\t\t\t\tbreak;\n\t\t\tcase BinaryTokens.UnsignedInt32:\n\t\t\t\tthis.write32(value);\n\t\t\t\tbreak;\n\t\t\tcase BinaryTokens.SignedFloat64:\n\t\t\t\tthis.writeF64(-value);\n\t\t\t\tbreak;\n\t\t\tcase BinaryTokens.UnsignedFloat64:\n\t\t\t\tthis.writeF64(value);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unreachable code. Got unexpected integer type ${type}`);\n\t\t}\n\t}\n\n\tprivate parseObject(value: object) {\n\t\tif (value === null) return this.parseValueNull();\n\n\t\t// Circular reference detection\n\t\tconst id = this._objectIDs.get(value);\n\t\tif (typeof id === 'number') return this.parseValueReference(id);\n\n\t\t// Set this object to the reference list\n\t\tthis._objectIDs.set(value, this._objectIDs.size);\n\n\t\t// If it's an array, parse it\n\t\tif (Array.isArray(value)) return this.parseValueArray(value);\n\n\t\t// We're doing this because it's safer for the context where you\n\t\t// extend the classes.\n\t\tconst tag = Object.prototype.toString.call(value);\n\t\tswitch (tag) {\n\t\t\tcase '[object String]':\n\t\t\t\treturn this.parseValueObjectString(value as unknown as string);\n\t\t\tcase '[object Boolean]':\n\t\t\t\treturn this.parseValueObjectBoolean(value as unknown as boolean);\n\t\t\tcase '[object Number]':\n\t\t\t\treturn this.parseValueObjectNumber(value as unknown as number);\n\t\t\tcase '[object Date]':\n\t\t\t\treturn this.parseValueObjectDate(value as Date);\n\t\t\tcase '[object RegExp]':\n\t\t\t\treturn this.parseValueObjectRegExp(value as RegExp);\n\t\t\tcase '[object Object]':\n\t\t\t\treturn this.parseValueObjectLiteral(value);\n\t\t\tcase '[object Map]':\n\t\t\t\treturn this.parseValueObjectMap(value as Map<unknown, unknown>);\n\t\t\tcase '[object Set]':\n\t\t\t\treturn this.parseValueObjectSet(value as Set<unknown>);\n\t\t\tcase '[object ArrayBuffer]':\n\t\t\t\treturn this.parseValueObjectArrayBuffer(value as ArrayBuffer);\n\t\t\tcase '[object WeakMap]':\n\t\t\t\treturn this.parseValueObjectWeakMap();\n\t\t\tcase '[object WeakSet]':\n\t\t\t\treturn this.parseValueObjectWeakSet();\n\t\t\tcase '[object Promise]':\n\t\t\t\treturn this.handleUnsupported(value, 'object');\n\t\t\tdefault:\n\t\t\t\treturn this.parseValueObjectFallback(value, tag);\n\t\t}\n\t}\n\n\tprivate parseString(value: string) {\n\t\tthis.write8(BinaryTokens.String);\n\t\tthis.writeValueString(value);\n\t}\n\n\tprivate parseUndefined() {\n\t\tthis.write8(BinaryTokens.Undefined);\n\t}\n\n\tprivate parseValueNull() {\n\t\tthis.write8(BinaryTokens.Null);\n\t}\n\n\tprivate parseValueObjectString(value: String) {\n\t\tthis.write8(BinaryTokens.StringObject);\n\t\tthis.writeValueString(value.valueOf());\n\t}\n\n\tprivate parseValueObjectBoolean(value: Boolean) {\n\t\tthis.write8(BinaryTokens.BooleanObject);\n\t\tthis.write8(value.valueOf() ? 1 : 0);\n\t}\n\n\tprivate parseValueObjectNumber(value: Number) {\n\t\tthis.write8(BinaryTokens.NumberObject);\n\t\tthis.writeF64(value.valueOf());\n\t}\n\n\tprivate parseValueObjectDate(value: Date) {\n\t\tthis.write8(BinaryTokens.Date);\n\t\tthis.writeF64(value.valueOf());\n\t}\n\n\tprivate parseValueObjectRegExp(value: RegExp) {\n\t\tthis.write8(BinaryTokens.RegExp);\n\t\tthis.writeValueString(value.source);\n\t\tthis.write8(RegExps.flagsAsInteger(value));\n\t}\n\n\tprivate parseValueObjectLiteral(value: Record<any, any>) {\n\t\tconst keys = Object.keys(value);\n\t\tif (keys.length === 0) {\n\t\t\treturn this.write8(BinaryTokens.EmptyObject);\n\t\t}\n\n\t\tthis.write8(BinaryTokens.Object);\n\t\tfor (const entryKey of keys) {\n\t\t\tthis.parse(entryKey);\n\t\t\tthis.parse(value[entryKey]);\n\t\t}\n\n\t\tthis.write8(BinaryTokens.NullPointer);\n\t}\n\n\tprivate parseValueObjectMap(value: Map<unknown, unknown>) {\n\t\tif (value.size === 0) {\n\t\t\treturn this.write8(BinaryTokens.EmptyMap);\n\t\t}\n\n\t\tthis.write8(BinaryTokens.Map);\n\t\tfor (const [entryKey, entryValue] of value.entries()) {\n\t\t\tthis.parse(entryKey);\n\t\t\tthis.parse(entryValue);\n\t\t}\n\n\t\tthis.write8(BinaryTokens.NullPointer);\n\t}\n\n\tprivate parseValueObjectSet(value: Set<unknown>) {\n\t\tif (value.size === 0) {\n\t\t\treturn this.write8(BinaryTokens.EmptySet);\n\t\t}\n\n\t\tthis.write8(BinaryTokens.Set);\n\t\tfor (const entryValue of value) {\n\t\t\tthis.parse(entryValue);\n\t\t}\n\n\t\tthis.write8(BinaryTokens.NullPointer);\n\t}\n\n\tprivate parseValueObjectArrayBuffer(value: ArrayBuffer) {\n\t\tthis.write8(BinaryTokens.ArrayBuffer);\n\n\t\tconst uint8Array = new Uint8Array(value);\n\t\tthis.write32(uint8Array.length);\n\t\tthis.write(uint8Array);\n\t}\n\n\tprivate parseValueObjectWeakMap() {\n\t\tthis.write8(BinaryTokens.WeakMap);\n\t}\n\n\tprivate parseValueObjectWeakSet() {\n\t\tthis.write8(BinaryTokens.WeakSet);\n\t}\n\n\tprivate parseValueObjectFallback(value: object, tag: string) {\n\t\tconst typedArrayTag = TypedArrays.typedArrayTags.get(tag);\n\t\tif (typedArrayTag) this.writeValueTypedArray(value as TypedArray, typedArrayTag);\n\t\telse this.parseValueObjectLiteral(value);\n\t}\n\n\tprivate parseValueReference(value: number) {\n\t\tthis.write8(BinaryTokens.ObjectReference);\n\t\tthis.write32(value);\n\t}\n\n\tprivate parseValueArray(value: Array<unknown>) {\n\t\tif (value.length === 0) {\n\t\t\treturn this.write8(BinaryTokens.EmptyArray);\n\t\t}\n\n\t\tthis.ensureAlloc(2);\n\t\tthis.write8(BinaryTokens.Array);\n\n\t\tfor (let i = 0, n = value.length; i < n; i++) {\n\t\t\tif (i in value) {\n\t\t\t\tthis.parse(value[i]);\n\t\t\t} else {\n\t\t\t\tthis.write8(BinaryTokens.Hole);\n\t\t\t}\n\t\t}\n\n\t\tthis.write8(BinaryTokens.NullPointer);\n\t}\n\n\tprivate writeValueTypedArray(value: TypedArray, tag: BinaryTokens) {\n\t\tthis.write8(tag);\n\t\tthis.write32(value.byteLength);\n\n\t\tif (tag !== BinaryTokens.Uint8Array) {\n\t\t\tvalue = new Uint8Array(value.buffer);\n\t\t}\n\n\t\tthis.write(value as Uint8Array);\n\t}\n\n\tprivate write(value: Uint8Array) {\n\t\tthis.ensureAlloc(value.byteLength);\n\t\tthis._buffer!.set(value, this._offset);\n\t\tthis._offset += value.byteLength;\n\t}\n\n\tprivate write8(value: number) {\n\t\tthis.ensureAlloc(1);\n\t\tthis._buffer![this._offset++] = value;\n\t}\n\n\tprivate write32(value: number) {\n\t\tthis.ensureAlloc(4);\n\t\tthis.write32At(value, this._offset);\n\t\tthis._offset += 4;\n\t}\n\n\tprivate write32At(value: number, offset: number) {\n\t\tthis._buffer![offset + 3] = value;\n\t\tvalue >>>= 8;\n\t\tthis._buffer![offset + 2] = value;\n\t\tvalue >>>= 8;\n\t\tthis._buffer![offset + 1] = value;\n\t\tvalue >>>= 8;\n\t\tthis._buffer![offset] = value;\n\t}\n\n\tprivate writeF64(value: number) {\n\t\tfloat64Array[0] = value;\n\t\tthis.write(uInt8Float64Array);\n\t}\n\n\tprivate writeValueString(value: string) {\n\t\tconst serialized = Serializer._textEncoder.encode(value);\n\n\t\t// Strings must not contain a null pointer, since they are null-delimited.\n\t\tif (serialized.includes(BinaryTokens.NullPointer)) {\n\t\t\tthrow new SerializerError('Unexpected null pointer in serialized string.', SerializerReason.UnexpectedNullValue);\n\t\t}\n\n\t\tthis.write(serialized);\n\t\tthis.write8(BinaryTokens.NullPointer);\n\t}\n\n\tprivate getNumberType(value: number) {\n\t\tconst sign = value < 0;\n\t\tif (value % 1 === 0) {\n\t\t\t// Byte (S | U)\n\t\t\tif (value >= MIN_INT8 && value <= MAX_INT8) return sign ? BinaryTokens.SignedByte : BinaryTokens.UnsignedByte;\n\t\t\t// Int32 (S | U)\n\t\t\tif (value >= MIN_INT32 && value <= MAX_INT32) return sign ? BinaryTokens.SignedInt32 : BinaryTokens.UnsignedInt32;\n\t\t\t// Fallback to float\n\t\t}\n\t\t// Float64\n\t\treturn sign ? BinaryTokens.SignedFloat64 : BinaryTokens.UnsignedFloat64;\n\t}\n\n\tprivate ensureAlloc(amount: number) {\n\t\tthis.expandBuffer(this._offset + amount);\n\t}\n\n\tprivate expandBuffer(length: number) {\n\t\tif (this._buffer!.length < length) {\n\t\t\tconst old = this._buffer;\n\t\t\tthis._buffer = new Uint8Array(Numbers.nextPowerOfTwo(length));\n\t\t\tthis._buffer.set(old!);\n\t\t}\n\t}\n\n\tprivate static _textEncoder = new TextEncoder();\n}\n"],"mappings":"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","names":["DeserializerReason","BinaryTokens","BinaryPrimitives","RegExps","BigIntegers","Numbers","TypedArrays","SerializerReason","float64Array","uInt8Float64Array"]}