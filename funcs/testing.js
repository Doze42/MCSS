const { hexy } = require("hexy");

function stringArrayToObject(stringArray) {
  if (!(stringArray instanceof Array)) {
    throw new Error("Argument must be of type Array");
  }

  if (stringArray.find(string => typeof string !== "string")) {
    throw new Error("Argument must be an array of strings");
  }

  const returnObject = {};
  for (let i = 0; i < stringArray.length; i += 2) {
    returnObject[stringArray[i]] = stringArray[i + 1];
  }

  return returnObject;
}

const show_hexy = buf => void console.log(hexy(buf).trim())

let ctr = 0;
const auto = () => ++ctr;

const isAscii = byte => byte >= 0x20 && byte <= 0x7e;

function strings(buffer) {
  let offset = 0;

  const returnArray = [];

  while (offset < buffer.length) {
    let length = 0;

    while (isAscii(buffer[offset + length])) {
      length++;
    }

    if (length) {
      returnArray.push(buffer.slice(offset, offset += length));
    } else {
      offset++;
    }
  }

  return returnArray.map(buf => buf.toString("ascii"));
}

function fullstatStrings(packet) {
  strArray = strings(packet);

  console.log(strArray);

  const State = {
    Splitnum  : auto(),
    Attributes: auto(),
    Players   : auto()
  };

  const attrs = [];
  const players = [];

  let state = State.Splitnum;

  for (const string of strArray) {
    switch (state) {
      case State.Splitnum:
        console.log("splitnum");

        if (string !== "splitnum") {
          throw new Error("idk what to do with this " + string);
        }

        state = State.Attributes;

        break;

      case State.Attributes:
        console.log("attributes", string);

        if (string === "player_") {
          state = State.Players;

          break;
        }

        attrs.push(string);

        if (string === "plugins") {
          if (packet.includes(Buffer.from("plugins\0\0"))) {
            attrs.push("");
          }
        }

        break;

      case State.Players:
        console.log("players", string);

        players.push(string);

        break;
    }
  }

  return {
    ...stringArrayToObject(attrs),
    players
  };
}

function main() {
  console.dir(
    fullstatStrings(
      Buffer.from([ 0x00, 0x00, 0x00, 0x00, 0x01, 0x73, 0x70, 0x6C, 0x69, 0x74, 0x6E, 0x75, 0x6D, 0x00, 0x80, 0x00, 0x68, 0x6F, 0x73, 0x74, 0x6E, 0x61, 0x6D, 0x65, 0x00, 0x41, 0x20, 0x4D, 0x69, 0x6E, 0x65, 0x63, 0x72, 0x61, 0x66, 0x74, 0x20, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x00, 0x67, 0x61, 0x6D, 0x65, 0x74, 0x79, 0x70, 0x65, 0x00, 0x53, 0x4D, 0x50, 0x00, 0x67, 0x61, 0x6D, 0x65, 0x5F, 0x69, 0x64, 0x00, 0x4D, 0x49, 0x4E, 0x45, 0x43, 0x52, 0x41, 0x46, 0x54, 0x00, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x00, 0x42, 0x65, 0x74, 0x61, 0x20, 0x31, 0x2E, 0x39, 0x20, 0x50, 0x72, 0x65, 0x72, 0x65, 0x6C, 0x65, 0x61, 0x73, 0x65, 0x20, 0x34, 0x00, 0x70, 0x6C, 0x75, 0x67, 0x69, 0x6E, 0x73, 0x00, 0x00, 0x6D, 0x61, 0x70, 0x00, 0x77, 0x6F, 0x72, 0x6C, 0x64, 0x00, 0x6E, 0x75, 0x6D, 0x70, 0x6C, 0x61, 0x79, 0x65, 0x72, 0x73, 0x00, 0x32, 0x00, 0x6D, 0x61, 0x78, 0x70, 0x6C, 0x61, 0x79, 0x65, 0x72, 0x73, 0x00, 0x32, 0x30, 0x00, 0x68, 0x6F, 0x73, 0x74, 0x70, 0x6F, 0x72, 0x74, 0x00, 0x32, 0x35, 0x35, 0x36, 0x35, 0x00, 0x68, 0x6F, 0x73, 0x74, 0x69, 0x70, 0x00, 0x31, 0x32, 0x37, 0x2E, 0x30, 0x2E, 0x30, 0x2E, 0x31, 0x00, 0x00, 0x01, 0x70, 0x6C, 0x61, 0x79, 0x65, 0x72, 0x5F, 0x00, 0x00, 0x62, 0x61, 0x72, 0x6E, 0x65, 0x79, 0x67, 0x61, 0x6C, 0x65, 0x00, 0x56, 0x69, 0x76, 0x61, 0x6C, 0x61, 0x68, 0x65, 0x6C, 0x76, 0x69, 0x67, 0x00, 0x00 ])
    )
  );
}
